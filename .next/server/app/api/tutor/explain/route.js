"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/tutor/explain/route";
exports.ids = ["app/api/tutor/explain/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("string_decoder");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:assert":
/*!******************************!*\
  !*** external "node:assert" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:assert");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:buffer");

/***/ }),

/***/ "node:console":
/*!*******************************!*\
  !*** external "node:console" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("node:console");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:diagnostics_channel":
/*!*******************************************!*\
  !*** external "node:diagnostics_channel" ***!
  \*******************************************/
/***/ ((module) => {

module.exports = require("node:diagnostics_channel");

/***/ }),

/***/ "node:dns":
/*!***************************!*\
  !*** external "node:dns" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:dns");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:events");

/***/ }),

/***/ "node:http":
/*!****************************!*\
  !*** external "node:http" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:http");

/***/ }),

/***/ "node:http2":
/*!*****************************!*\
  !*** external "node:http2" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node:http2");

/***/ }),

/***/ "node:net":
/*!***************************!*\
  !*** external "node:net" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:net");

/***/ }),

/***/ "node:perf_hooks":
/*!**********************************!*\
  !*** external "node:perf_hooks" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:perf_hooks");

/***/ }),

/***/ "node:querystring":
/*!***********************************!*\
  !*** external "node:querystring" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("node:querystring");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:tls":
/*!***************************!*\
  !*** external "node:tls" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:tls");

/***/ }),

/***/ "node:url":
/*!***************************!*\
  !*** external "node:url" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:url");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),

/***/ "node:util/types":
/*!**********************************!*\
  !*** external "node:util/types" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:util/types");

/***/ }),

/***/ "node:worker_threads":
/*!**************************************!*\
  !*** external "node:worker_threads" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("node:worker_threads");

/***/ }),

/***/ "node:zlib":
/*!****************************!*\
  !*** external "node:zlib" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftutor%2Fexplain%2Froute&page=%2Fapi%2Ftutor%2Fexplain%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftutor%2Fexplain%2Froute.ts&appDir=E%3A%5CCode%20projects%5Cgithub%20projects%5Csmart-sage-bot%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CCode%20projects%5Cgithub%20projects%5Csmart-sage-bot&isDev=true&tsconfigPath=.%2Ftsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftutor%2Fexplain%2Froute&page=%2Fapi%2Ftutor%2Fexplain%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftutor%2Fexplain%2Froute.ts&appDir=E%3A%5CCode%20projects%5Cgithub%20projects%5Csmart-sage-bot%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CCode%20projects%5Cgithub%20projects%5Csmart-sage-bot&isDev=true&tsconfigPath=.%2Ftsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var E_Code_projects_github_projects_smart_sage_bot_app_api_tutor_explain_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/tutor/explain/route.ts */ \"(rsc)/./app/api/tutor/explain/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/tutor/explain/route\",\n        pathname: \"/api/tutor/explain\",\n        filename: \"route\",\n        bundlePath: \"app/api/tutor/explain/route\"\n    },\n    resolvedPagePath: \"E:\\\\Code projects\\\\github projects\\\\smart-sage-bot\\\\app\\\\api\\\\tutor\\\\explain\\\\route.ts\",\n    nextConfigOutput,\n    userland: E_Code_projects_github_projects_smart_sage_bot_app_api_tutor_explain_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/tutor/explain/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ0dXRvciUyRmV4cGxhaW4lMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnR1dG9yJTJGZXhwbGFpbiUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnR1dG9yJTJGZXhwbGFpbiUyRnJvdXRlLnRzJmFwcERpcj1FJTNBJTVDQ29kZSUyMHByb2plY3RzJTVDZ2l0aHViJTIwcHJvamVjdHMlNUNzbWFydC1zYWdlLWJvdCU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9RSUzQSU1Q0NvZGUlMjBwcm9qZWN0cyU1Q2dpdGh1YiUyMHByb2plY3RzJTVDc21hcnQtc2FnZS1ib3QmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9LiUyRnRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNzQztBQUNuSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3NtYXJ0LXNhZ2UtYm90Lz85M2IwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkU6XFxcXENvZGUgcHJvamVjdHNcXFxcZ2l0aHViIHByb2plY3RzXFxcXHNtYXJ0LXNhZ2UtYm90XFxcXGFwcFxcXFxhcGlcXFxcdHV0b3JcXFxcZXhwbGFpblxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdHV0b3IvZXhwbGFpbi9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3R1dG9yL2V4cGxhaW5cIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3R1dG9yL2V4cGxhaW4vcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJFOlxcXFxDb2RlIHByb2plY3RzXFxcXGdpdGh1YiBwcm9qZWN0c1xcXFxzbWFydC1zYWdlLWJvdFxcXFxhcHBcXFxcYXBpXFxcXHR1dG9yXFxcXGV4cGxhaW5cXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3R1dG9yL2V4cGxhaW4vcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftutor%2Fexplain%2Froute&page=%2Fapi%2Ftutor%2Fexplain%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftutor%2Fexplain%2Froute.ts&appDir=E%3A%5CCode%20projects%5Cgithub%20projects%5Csmart-sage-bot%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CCode%20projects%5Cgithub%20projects%5Csmart-sage-bot&isDev=true&tsconfigPath=.%2Ftsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/tutor/explain/route.ts":
/*!****************************************!*\
  !*** ./app/api/tutor/explain/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _server_pipelines__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/server/pipelines */ \"(rsc)/./src/server/pipelines.ts\");\n\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { message, topic, userLevel = \"intermediate\", learningStyle = \"reading\" } = body || {};\n        if (!message || typeof message !== \"string\") {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Message is required and must be a string\"\n            }, {\n                status: 400\n            });\n        }\n        const pipeline = (0,_server_pipelines__WEBPACK_IMPORTED_MODULE_1__.createPipeline)(\"tutor\");\n        const result = await pipeline.process(message, {\n            topic: topic || message,\n            userLevel,\n            learningStyle,\n            documentCount: 8\n        });\n        const response = {\n            success: true,\n            tutorialSections: result.tutorialSections || [],\n            thinkingSteps: result.thinkingSteps,\n            pipelineInfo: result.pipelineInfo,\n            sources: result.sources || [],\n            mode: \"tutor\",\n            metadata: result.metadata || {\n                topic: topic || message,\n                userLevel,\n                learningStyle,\n                sectionCount: result.tutorialSections?.length || 0\n            },\n            timestamp: new Date().toISOString()\n        };\n        if (!result.tutorialSections || result.tutorialSections.length === 0) {\n            response.error = result.error || \"Unable to generate tutorial content for this topic.\";\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response);\n    } catch (error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error?.message || \"Unknown error\",\n            tutorialSections: [],\n            timestamp: new Date().toISOString()\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3R1dG9yL2V4cGxhaW4vcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTBDO0FBQ1M7QUFFNUMsZUFBZUUsS0FBS0MsT0FBZ0I7SUFDekMsSUFBSTtRQUNGLE1BQU1DLE9BQU8sTUFBTUQsUUFBUUUsSUFBSTtRQUMvQixNQUFNLEVBQUVDLE9BQU8sRUFBRUMsS0FBSyxFQUFFQyxZQUFZLGNBQWMsRUFBRUMsZ0JBQWdCLFNBQVMsRUFBRSxHQUFHTCxRQUFRLENBQUM7UUFDM0YsSUFBSSxDQUFDRSxXQUFXLE9BQU9BLFlBQVksVUFBVTtZQUMzQyxPQUFPTixxREFBWUEsQ0FBQ0ssSUFBSSxDQUFDO2dCQUFFSyxTQUFTO2dCQUFPQyxPQUFPO1lBQTJDLEdBQUc7Z0JBQUVDLFFBQVE7WUFBSTtRQUNoSDtRQUNBLE1BQU1DLFdBQVdaLGlFQUFjQSxDQUFDO1FBQ2hDLE1BQU1hLFNBQVMsTUFBTUQsU0FBU0UsT0FBTyxDQUFDVCxTQUFTO1lBQUVDLE9BQU9BLFNBQVNEO1lBQVNFO1lBQVdDO1lBQWVPLGVBQWU7UUFBRTtRQUNySCxNQUFNQyxXQUFnQjtZQUNwQlAsU0FBUztZQUNUUSxrQkFBa0JKLE9BQU9JLGdCQUFnQixJQUFJLEVBQUU7WUFDL0NDLGVBQWVMLE9BQU9LLGFBQWE7WUFDbkNDLGNBQWNOLE9BQU9NLFlBQVk7WUFDakNDLFNBQVNQLE9BQU9PLE9BQU8sSUFBSSxFQUFFO1lBQzdCQyxNQUFNO1lBQ05DLFVBQVVULE9BQU9TLFFBQVEsSUFBSTtnQkFBRWhCLE9BQU9BLFNBQVNEO2dCQUFTRTtnQkFBV0M7Z0JBQWVlLGNBQWNWLE9BQU9JLGdCQUFnQixFQUFFTyxVQUFVO1lBQUU7WUFDcklDLFdBQVcsSUFBSUMsT0FBT0MsV0FBVztRQUNuQztRQUNBLElBQUksQ0FBQ2QsT0FBT0ksZ0JBQWdCLElBQUlKLE9BQU9JLGdCQUFnQixDQUFDTyxNQUFNLEtBQUssR0FBRztZQUNwRVIsU0FBU04sS0FBSyxHQUFHRyxPQUFPSCxLQUFLLElBQUk7UUFDbkM7UUFDQSxPQUFPWCxxREFBWUEsQ0FBQ0ssSUFBSSxDQUFDWTtJQUMzQixFQUFFLE9BQU9OLE9BQVk7UUFDbkIsT0FBT1gscURBQVlBLENBQUNLLElBQUksQ0FBQztZQUFFSyxTQUFTO1lBQU9DLE9BQU9BLE9BQU9MLFdBQVc7WUFBaUJZLGtCQUFrQixFQUFFO1lBQUVRLFdBQVcsSUFBSUMsT0FBT0MsV0FBVztRQUFHLEdBQUc7WUFBRWhCLFFBQVE7UUFBSTtJQUNsSztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc21hcnQtc2FnZS1ib3QvLi9hcHAvYXBpL3R1dG9yL2V4cGxhaW4vcm91dGUudHM/YmUyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcidcclxuaW1wb3J0IHsgY3JlYXRlUGlwZWxpbmUgfSBmcm9tICdAL3NlcnZlci9waXBlbGluZXMnXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBSZXF1ZXN0KSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKVxyXG4gICAgY29uc3QgeyBtZXNzYWdlLCB0b3BpYywgdXNlckxldmVsID0gJ2ludGVybWVkaWF0ZScsIGxlYXJuaW5nU3R5bGUgPSAncmVhZGluZycgfSA9IGJvZHkgfHwge31cclxuICAgIGlmICghbWVzc2FnZSB8fCB0eXBlb2YgbWVzc2FnZSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnTWVzc2FnZSBpcyByZXF1aXJlZCBhbmQgbXVzdCBiZSBhIHN0cmluZycgfSwgeyBzdGF0dXM6IDQwMCB9KVxyXG4gICAgfVxyXG4gICAgY29uc3QgcGlwZWxpbmUgPSBjcmVhdGVQaXBlbGluZSgndHV0b3InKVxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGlwZWxpbmUucHJvY2VzcyhtZXNzYWdlLCB7IHRvcGljOiB0b3BpYyB8fCBtZXNzYWdlLCB1c2VyTGV2ZWwsIGxlYXJuaW5nU3R5bGUsIGRvY3VtZW50Q291bnQ6IDggfSlcclxuICAgIGNvbnN0IHJlc3BvbnNlOiBhbnkgPSB7XHJcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgIHR1dG9yaWFsU2VjdGlvbnM6IHJlc3VsdC50dXRvcmlhbFNlY3Rpb25zIHx8IFtdLFxyXG4gICAgICB0aGlua2luZ1N0ZXBzOiByZXN1bHQudGhpbmtpbmdTdGVwcyxcclxuICAgICAgcGlwZWxpbmVJbmZvOiByZXN1bHQucGlwZWxpbmVJbmZvLFxyXG4gICAgICBzb3VyY2VzOiByZXN1bHQuc291cmNlcyB8fCBbXSxcclxuICAgICAgbW9kZTogJ3R1dG9yJyxcclxuICAgICAgbWV0YWRhdGE6IHJlc3VsdC5tZXRhZGF0YSB8fCB7IHRvcGljOiB0b3BpYyB8fCBtZXNzYWdlLCB1c2VyTGV2ZWwsIGxlYXJuaW5nU3R5bGUsIHNlY3Rpb25Db3VudDogcmVzdWx0LnR1dG9yaWFsU2VjdGlvbnM/Lmxlbmd0aCB8fCAwIH0sXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgfVxyXG4gICAgaWYgKCFyZXN1bHQudHV0b3JpYWxTZWN0aW9ucyB8fCByZXN1bHQudHV0b3JpYWxTZWN0aW9ucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmVzcG9uc2UuZXJyb3IgPSByZXN1bHQuZXJyb3IgfHwgJ1VuYWJsZSB0byBnZW5lcmF0ZSB0dXRvcmlhbCBjb250ZW50IGZvciB0aGlzIHRvcGljLidcclxuICAgIH1cclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihyZXNwb25zZSlcclxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGVycm9yPy5tZXNzYWdlIHx8ICdVbmtub3duIGVycm9yJywgdHV0b3JpYWxTZWN0aW9uczogW10sIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH0sIHsgc3RhdHVzOiA1MDAgfSlcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsImNyZWF0ZVBpcGVsaW5lIiwiUE9TVCIsInJlcXVlc3QiLCJib2R5IiwianNvbiIsIm1lc3NhZ2UiLCJ0b3BpYyIsInVzZXJMZXZlbCIsImxlYXJuaW5nU3R5bGUiLCJzdWNjZXNzIiwiZXJyb3IiLCJzdGF0dXMiLCJwaXBlbGluZSIsInJlc3VsdCIsInByb2Nlc3MiLCJkb2N1bWVudENvdW50IiwicmVzcG9uc2UiLCJ0dXRvcmlhbFNlY3Rpb25zIiwidGhpbmtpbmdTdGVwcyIsInBpcGVsaW5lSW5mbyIsInNvdXJjZXMiLCJtb2RlIiwibWV0YWRhdGEiLCJzZWN0aW9uQ291bnQiLCJsZW5ndGgiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/tutor/explain/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/agents.ts":
/*!******************************!*\
  !*** ./src/server/agents.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnswerAgent: () => (/* binding */ AnswerAgent),\n/* harmony export */   BaseAgent: () => (/* binding */ BaseAgent),\n/* harmony export */   CriticAgent: () => (/* binding */ CriticAgent),\n/* harmony export */   QueryAgent: () => (/* binding */ QueryAgent),\n/* harmony export */   QuizAgent: () => (/* binding */ QuizAgent),\n/* harmony export */   RefineAgent: () => (/* binding */ RefineAgent),\n/* harmony export */   RetrievalAgent: () => (/* binding */ RetrievalAgent),\n/* harmony export */   TutorAgent: () => (/* binding */ TutorAgent)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _vectorstore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vectorstore */ \"(rsc)/./src/server/vectorstore.ts\");\n\n\n\nconst GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;\nconst OLLAMA_HOST = process.env.OLLAMA_HOST || \"http://localhost:11434\";\nconst GEMINI_MODEL = process.env.GEMINI_MODEL || \"gemini-1.5-flash\";\nconst GEMINI_TEMPERATURE = parseFloat(process.env.GEMINI_TEMPERATURE || \"0.7\");\nconst GEMINI_MAX_TOKENS = parseInt(process.env.GEMINI_MAX_TOKENS || \"2048\");\nconst genAI = GOOGLE_API_KEY ? new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(GOOGLE_API_KEY) : null;\nclass BaseAgent {\n    constructor(name){\n        this.name = name;\n    }\n    async process(_input) {\n        throw new Error(\"not implemented\");\n    }\n}\nclass QueryAgent extends BaseAgent {\n    constructor(){\n        super(\"QueryAgent\");\n    }\n    async process(input) {\n        const steps = [];\n        const processedQuery = String(input.query || \"\").trim();\n        const needsRetrieval = this.shouldRetrieve(processedQuery);\n        steps.push({\n            agent: this.name,\n            step: \"Query Analysis\",\n            status: \"completed\",\n            message: `Query processed. Needs retrieval: ${needsRetrieval}`,\n            details: {\n                originalQuery: input.query,\n                processedQuery,\n                needsRetrieval\n            }\n        });\n        return {\n            processedQuery,\n            needsRetrieval,\n            thinkingSteps: steps\n        };\n    }\n    shouldRetrieve(q) {\n        const words = [\n            \"what\",\n            \"how\",\n            \"why\",\n            \"when\",\n            \"where\",\n            \"who\",\n            \"which\"\n        ];\n        const l = q.toLowerCase();\n        return words.some((w)=>l.includes(w)) || q.length > 20 || l.includes(\"?\");\n    }\n}\nclass RetrievalAgent extends BaseAgent {\n    constructor(){\n        super(\"RetrievalAgent\");\n    }\n    async process(input) {\n        const steps = [];\n        steps.push({\n            agent: this.name,\n            step: \"Vector Search\",\n            status: \"processing\",\n            message: \"Searching for relevant documents...\"\n        });\n        try {\n            const store = await (0,_vectorstore__WEBPACK_IMPORTED_MODULE_1__.getVectorStore)();\n            console.log(`[RetrievalAgent] Searching for query: \"${input.query}\" with k=${input.k || 5}`);\n            const documents = await store.similaritySearch(input.query, input.k || 5);\n            console.log(`[RetrievalAgent] Search returned ${documents.length} documents`);\n            if (documents.length === 0) {\n                console.log(\"[RetrievalAgent] NO SOURCES - No documents found in collection\");\n            } else {\n                console.log(\"[RetrievalAgent] Documents found:\", documents.map((d)=>({\n                        contentPreview: d.content?.substring(0, 100) + \"...\",\n                        source: d.metadata?.source\n                    })));\n            }\n            steps.push({\n                agent: this.name,\n                step: \"Vector Search\",\n                status: \"completed\",\n                message: `Found ${documents.length} relevant documents`\n            });\n            return {\n                documents,\n                thinkingSteps: steps\n            };\n        } catch (error) {\n            console.error(\"[RetrievalAgent] Error during search:\", error);\n            steps.push({\n                agent: this.name,\n                step: \"Vector Search\",\n                status: \"error\",\n                message: `Search failed: ${error.message}`\n            });\n            return {\n                documents: [],\n                thinkingSteps: steps\n            };\n        }\n    }\n}\nclass AnswerAgent extends BaseAgent {\n    constructor(){\n        super(\"AnswerAgent\");\n    }\n    async process(input) {\n        const steps = [];\n        steps.push({\n            agent: this.name,\n            step: \"Response Generation\",\n            status: \"processing\",\n            message: \"Generating response using retrieved context...\"\n        });\n        const context = (input.documents || []).map((d)=>d.content).join(\"\\n\\n\");\n        const answer = await this.generateAnswer(input.query, context);\n        steps.push({\n            agent: this.name,\n            step: \"Response Generation\",\n            status: \"completed\",\n            message: \"Response generated successfully\"\n        });\n        return {\n            answer,\n            thinkingSteps: steps\n        };\n    }\n    async generateAnswer(query, context) {\n        const prompt = `Based on the following context, please answer the question. If the context doesn't contain enough information to answer the question, please say so.\r\n\r\nContext:\r\n${context}\r\n\r\nQuestion: ${query}\r\n\r\nAnswer:`;\n        if (genAI) {\n            try {\n                const model = genAI.getGenerativeModel({\n                    model: GEMINI_MODEL,\n                    generationConfig: {\n                        temperature: GEMINI_TEMPERATURE,\n                        maxOutputTokens: GEMINI_MAX_TOKENS\n                    }\n                });\n                const result = await model.generateContent(prompt);\n                const response = await result.response;\n                return response.text();\n            } catch (e) {\n                console.warn(\"Google Gemini failed:\", e);\n            }\n        }\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(`${OLLAMA_HOST}/api/generate`, {\n                model: \"gemma3:1b\",\n                prompt,\n                stream: false\n            });\n            return response.data.response;\n        } catch (e) {\n            console.error(\"Ollama failed:\", e);\n        }\n        return \"I apologize, but I'm unable to generate a response at the moment. Please try again later.\";\n    }\n}\nclass CriticAgent extends BaseAgent {\n    constructor(){\n        super(\"CriticAgent\");\n    }\n    async process(input) {\n        const steps = [];\n        const critiques = [];\n        let score = 5;\n        if ((input.answer || \"\").length < 50) critiques.push(\"Answer is too brief\");\n        if ((input.answer || \"\").includes(\"I don't know\") || (input.answer || \"\").includes(\"I can't\")) critiques.push(\"Answer indicates uncertainty\");\n        if ((input.documents || []).length === 0) critiques.push(\"No supporting documents found\");\n        if ((input.answer || \"\").length > 100) score += 1;\n        if ((input.documents || []).length > 0) score += 2;\n        if (!(input.answer || \"\").includes(\"I don't know\")) score += 1;\n        steps.push({\n            agent: this.name,\n            step: \"Answer Evaluation\",\n            status: \"completed\",\n            message: `Answer evaluated with score: ${score}/10`,\n            details: {\n                critique: critiques.length ? critiques.join(\"; \") : \"Answer appears comprehensive and well-supported\",\n                score\n            }\n        });\n        return {\n            critique: critiques.length ? critiques.join(\"; \") : \"Answer appears comprehensive and well-supported\",\n            score,\n            thinkingSteps: steps\n        };\n    }\n}\nclass RefineAgent extends BaseAgent {\n    constructor(){\n        super(\"RefineAgent\");\n    }\n    async process(input) {\n        const steps = [];\n        const refinementPrompt = `Please refine the following answer based on the critique provided. Make it more comprehensive and accurate.\r\n\r\nOriginal Query: ${input.query}\r\nOriginal Answer: ${input.answer}\r\nCritique: ${input.critique}\r\nSupporting Documents: ${(input.documents || []).map((d)=>d.content).join(\"\\n\\n\")}\r\n\r\nRefined Answer:`;\n        let refined = input.answer;\n        if (genAI) {\n            try {\n                const model = genAI.getGenerativeModel({\n                    model: GEMINI_MODEL,\n                    generationConfig: {\n                        temperature: GEMINI_TEMPERATURE,\n                        maxOutputTokens: GEMINI_MAX_TOKENS\n                    }\n                });\n                const result = await model.generateContent(refinementPrompt);\n                const response = await result.response;\n                refined = response.text();\n            } catch (e) {\n                console.warn(\"Google Gemini failed for refinement:\", e);\n            }\n        } else {\n            try {\n                const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(`${OLLAMA_HOST}/api/generate`, {\n                    model: \"gemma3:1b\",\n                    prompt: refinementPrompt,\n                    stream: false\n                });\n                refined = response.data.response;\n            } catch (e) {\n                console.error(\"Ollama failed for refinement:\", e);\n            }\n        }\n        steps.push({\n            agent: this.name,\n            step: \"Answer Refinement\",\n            status: \"completed\",\n            message: \"Answer refined successfully\"\n        });\n        return {\n            refinedAnswer: refined,\n            thinkingSteps: steps\n        };\n    }\n}\nclass QuizAgent extends BaseAgent {\n    constructor(){\n        super(\"QuizAgent\");\n    }\n    async process(input) {\n        const steps = [];\n        const context = (input.documents || []).map((d)=>d.content).join(\"\\n\\n\");\n        const prompt = `Based on the following context about \"${input.topic}\", generate ${input.questionCount || 3} multiple choice questions with difficulty level: ${input.difficulty || \"medium\"}.\r\n\r\nFor each question, provide:\r\n1. A clear question\r\n2. 4 multiple choice options (A, B, C, D)\r\n3. The correct answer (A, B, C, or D)\r\n4. A brief explanation of why the answer is correct\r\n\r\nFormat as JSON array with this structure:\r\n[\r\n  {\r\n    \"question\": \"Question text here?\",\r\n    \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\r\n    \"correctAnswer\": 1,\r\n    \"explanation\": \"Explanation here\",\r\n    \"difficulty\": \"${input.difficulty || \"medium\"}\",\r\n    \"category\": \"${input.topic}\"\r\n  }\r\n]\r\n\r\nContext:\r\n${context}\r\n\r\nJSON Response:`;\n        if (genAI) {\n            try {\n                const model = genAI.getGenerativeModel({\n                    model: GEMINI_MODEL,\n                    generationConfig: {\n                        temperature: 0.5,\n                        maxOutputTokens: GEMINI_MAX_TOKENS\n                    }\n                });\n                const result = await model.generateContent(prompt);\n                const text = (await result.response).text();\n                const m = text.match(/\\[[\\s\\S]*\\]/);\n                if (m) {\n                    const questions = JSON.parse(m[0]).map((q, idx)=>({\n                            id: `quiz_${Date.now()}_${idx}`,\n                            ...q,\n                            source: input.documents?.[0]?.metadata?.source || \"Generated from context\"\n                        }));\n                    steps.push({\n                        agent: this.name,\n                        step: \"Quiz Generation\",\n                        status: \"completed\",\n                        message: `Generated ${questions.length} quiz questions`\n                    });\n                    return {\n                        questions,\n                        thinkingSteps: steps\n                    };\n                }\n            } catch (e) {\n                console.warn(\"Quiz generation with Gemini failed:\", e);\n            }\n        } // fallback\n        const fallback = Array.from({\n            length: input.questionCount || 3\n        }).map((_, i)=>({\n                id: `fallback_${Date.now()}_${i}`,\n                question: `What is an important concept related to ${input.topic}?`,\n                options: [\n                    \"This is a concept from the provided context\",\n                    \"This is not relevant to the topic\",\n                    \"This is incorrect information\",\n                    \"This is not mentioned in the context\"\n                ],\n                correctAnswer: 0,\n                explanation: `Based on the provided context about ${input.topic}, the first option represents concepts discussed in the source material.`,\n                difficulty: input.difficulty || \"medium\",\n                category: input.topic,\n                source: input.documents?.[0]?.metadata?.source || \"Generated content\"\n            }));\n        steps.push({\n            agent: this.name,\n            step: \"Quiz Generation\",\n            status: \"completed\",\n            message: `Generated ${fallback.length} fallback quiz questions`\n        });\n        return {\n            questions: fallback,\n            thinkingSteps: steps\n        };\n    }\n}\nclass TutorAgent extends BaseAgent {\n    constructor(){\n        super(\"TutorAgent\");\n    }\n    async process(input) {\n        const steps = [];\n        const docs = input.documents || [];\n        steps.push({\n            agent: this.name,\n            step: \"Tutor Planning\",\n            status: \"processing\",\n            message: `Creating a structured tutorial for: ${input.topic}`\n        });\n        const context = docs.map((d)=>`- ${d.content}`).join(\"\\n\");\n        const jsonSpec = `Return JSON array with objects: { id: string, title: string, content: string, type: 'explanation' | 'example' | 'exercise' | 'summary' }`;\n        const prompt = `You are a patient, expert tutor. Create a short tutorial about \"${input.topic}\" using the context below. The tutorial should include 3-5 sections (mix of explanation, example, exercise, and a brief summary). Keep content concise but meaningful.\r\n\r\nContext (may be empty):\\n${context}\\n\\n${jsonSpec}\\nOnly output valid JSON array, nothing else.`;\n        try {\n            if (genAI) {\n                const model = genAI.getGenerativeModel({\n                    model: GEMINI_MODEL,\n                    generationConfig: {\n                        temperature: 0.6,\n                        maxOutputTokens: GEMINI_MAX_TOKENS\n                    }\n                });\n                const result = await model.generateContent(prompt);\n                const text = (await result.response).text();\n                const match = text.match(/\\[[\\s\\S]*\\]/);\n                if (match) {\n                    const sections = JSON.parse(match[0]);\n                    steps.push({\n                        agent: this.name,\n                        step: \"Tutor Generation\",\n                        status: \"completed\",\n                        message: `Generated ${sections.length} tutorial sections via LLM`\n                    });\n                    return {\n                        tutorialSections: sections,\n                        thinkingSteps: steps\n                    };\n                }\n            } else {\n                // Try Ollama as fallback\n                try {\n                    const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(`${OLLAMA_HOST}/api/generate`, {\n                        model: \"gemma3:1b\",\n                        prompt: `${prompt}\\n`,\n                        stream: false\n                    });\n                    const text = response.data.response;\n                    const match = text.match(/\\[[\\s\\S]*\\]/);\n                    if (match) {\n                        const sections = JSON.parse(match[0]);\n                        steps.push({\n                            agent: this.name,\n                            step: \"Tutor Generation\",\n                            status: \"completed\",\n                            message: `Generated ${sections.length} tutorial sections via Ollama`\n                        });\n                        return {\n                            tutorialSections: sections,\n                            thinkingSteps: steps\n                        };\n                    }\n                } catch (e) {}\n            }\n        } catch (e) {\n            console.warn(\"Tutor generation failed, using fallback:\", e);\n        }\n        // Static fallback\n        const sections = [\n            {\n                id: \"intro\",\n                title: `Overview of ${input.topic}`,\n                content: `This section introduces ${input.topic} with key ideas based on retrieved sources.`,\n                type: \"explanation\",\n                sources: docs\n            },\n            {\n                id: \"example\",\n                title: \"Worked example\",\n                content: \"A small example illustrating the concept.\",\n                type: \"example\",\n                sources: docs.slice(0, 1)\n            },\n            {\n                id: \"practice\",\n                title: \"Practice exercise\",\n                content: \"Try to summarize the concept in your own words.\",\n                type: \"exercise\",\n                sources: []\n            },\n            {\n                id: \"summary\",\n                title: \"Summary\",\n                content: `Key takeaways about ${input.topic}.`,\n                type: \"summary\",\n                sources: []\n            }\n        ];\n        steps.push({\n            agent: this.name,\n            step: \"Tutor Generation\",\n            status: \"completed\",\n            message: `Generated ${sections.length} fallback tutorial sections`\n        });\n        return {\n            tutorialSections: sections,\n            thinkingSteps: steps\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/agents.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/pipelines.ts":
/*!*********************************!*\
  !*** ./src/server/pipelines.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePipeline: () => (/* binding */ BasePipeline),\n/* harmony export */   createPipeline: () => (/* binding */ createPipeline)\n/* harmony export */ });\n/* harmony import */ var _agents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./agents */ \"(rsc)/./src/server/agents.ts\");\n\nclass BasePipeline {\n    constructor(name){\n        this.name = name;\n    }\n    async process(_query, _options) {\n        throw new Error(\"not implemented\");\n    }\n}\nclass Phase1Pipeline extends BasePipeline {\n    constructor(){\n        super(\"Phase 1: Basic A2A\");\n    }\n    async process(query) {\n        const steps = [];\n        const queryAgent = new _agents__WEBPACK_IMPORTED_MODULE_0__.QueryAgent();\n        const q = await queryAgent.process({\n            query\n        });\n        steps.push(...q.thinkingSteps);\n        let documents = [];\n        if (q.needsRetrieval) {\n            const r = new _agents__WEBPACK_IMPORTED_MODULE_0__.RetrievalAgent();\n            const rr = await r.process({\n                query: q.processedQuery,\n                k: 3\n            });\n            steps.push(...rr.thinkingSteps);\n            documents = rr.documents;\n        }\n        const a = new _agents__WEBPACK_IMPORTED_MODULE_0__.AnswerAgent();\n        const ar = await a.process({\n            query: q.processedQuery,\n            documents\n        });\n        steps.push(...ar.thinkingSteps);\n        return {\n            answer: ar.answer,\n            thinkingSteps: steps,\n            pipelineInfo: this.name,\n            sources: documents\n        };\n    }\n}\nclass Phase2Pipeline extends BasePipeline {\n    constructor(){\n        super(\"Phase 2: Smart A2A\");\n    }\n    async process(query) {\n        const steps = [];\n        const qAgent = new _agents__WEBPACK_IMPORTED_MODULE_0__.QueryAgent();\n        const q = await qAgent.process({\n            query\n        });\n        steps.push(...q.thinkingSteps);\n        let documents = [];\n        if (q.needsRetrieval) {\n            const r = new _agents__WEBPACK_IMPORTED_MODULE_0__.RetrievalAgent();\n            const rr = await r.process({\n                query: q.processedQuery,\n                k: 5\n            });\n            steps.push(...rr.thinkingSteps);\n            documents = rr.documents;\n        }\n        const a = new _agents__WEBPACK_IMPORTED_MODULE_0__.AnswerAgent();\n        const ar = await a.process({\n            query: q.processedQuery,\n            documents\n        });\n        steps.push(...ar.thinkingSteps);\n        let answer = ar.answer;\n        const c = new _agents__WEBPACK_IMPORTED_MODULE_0__.CriticAgent();\n        const cr = await c.process({\n            query: q.processedQuery,\n            answer,\n            documents\n        });\n        steps.push(...cr.thinkingSteps);\n        if (cr.score < 7) {\n            const ref = new _agents__WEBPACK_IMPORTED_MODULE_0__.RefineAgent();\n            const rf = await ref.process({\n                query: q.processedQuery,\n                answer,\n                critique: cr.critique,\n                documents\n            });\n            steps.push(...rf.thinkingSteps);\n            answer = rf.refinedAnswer;\n        }\n        return {\n            answer,\n            thinkingSteps: steps,\n            pipelineInfo: this.name,\n            sources: documents\n        };\n    }\n}\nclass Phase3Pipeline extends BasePipeline {\n    constructor(){\n        super(\"Phase 3: Self-Refinement\");\n    }\n    async process(query) {\n        const steps = [];\n        const qA = new _agents__WEBPACK_IMPORTED_MODULE_0__.QueryAgent();\n        const q = await qA.process({\n            query\n        });\n        steps.push(...q.thinkingSteps);\n        let documents = [];\n        if (q.needsRetrieval) {\n            const r = new _agents__WEBPACK_IMPORTED_MODULE_0__.RetrievalAgent();\n            const rr = await r.process({\n                query: q.processedQuery,\n                k: 7\n            });\n            steps.push(...rr.thinkingSteps);\n            documents = rr.documents;\n        }\n        const a = new _agents__WEBPACK_IMPORTED_MODULE_0__.AnswerAgent();\n        const ar = await a.process({\n            query: q.processedQuery,\n            documents\n        });\n        steps.push(...ar.thinkingSteps);\n        let current = ar.answer;\n        let iter = 0;\n        while(iter < 3){\n            const c = new _agents__WEBPACK_IMPORTED_MODULE_0__.CriticAgent();\n            const cr = await c.process({\n                query: q.processedQuery,\n                answer: current,\n                documents\n            });\n            steps.push(...cr.thinkingSteps);\n            if (cr.score >= 8) break;\n            const ref = new _agents__WEBPACK_IMPORTED_MODULE_0__.RefineAgent();\n            const rf = await ref.process({\n                query: q.processedQuery,\n                answer: current,\n                critique: cr.critique,\n                documents\n            });\n            steps.push(...rf.thinkingSteps);\n            current = rf.refinedAnswer;\n            iter++;\n        }\n        return {\n            answer: current,\n            thinkingSteps: steps,\n            pipelineInfo: this.name,\n            sources: documents\n        };\n    }\n}\nclass AutoPipeline extends BasePipeline {\n    constructor(){\n        super(\"AUTO: AI Selects Optimal\");\n    }\n    async process(query) {\n        const steps = [];\n        const complexity = query.length < 30 ? \"simple\" : query.length > 100 ? \"complex\" : \"medium\";\n        let selected = complexity === \"simple\" ? new Phase1Pipeline() : complexity === \"medium\" ? new Phase2Pipeline() : new Phase3Pipeline();\n        const res = await selected.process(query);\n        steps.push(...res.thinkingSteps || []);\n        return {\n            answer: res.answer,\n            thinkingSteps: steps,\n            pipelineInfo: `${this.name} → ${selected.name}`,\n            sources: res.sources || []\n        };\n    }\n}\nclass QuizPipeline extends BasePipeline {\n    constructor(){\n        super(\"Quiz Generation Pipeline\");\n    }\n    async process(query, options = {}) {\n        const steps = [];\n        const qa = new _agents__WEBPACK_IMPORTED_MODULE_0__.QueryAgent();\n        const q = await qa.process({\n            query\n        });\n        steps.push(...q.thinkingSteps);\n        const r = new _agents__WEBPACK_IMPORTED_MODULE_0__.RetrievalAgent();\n        const rr = await r.process({\n            query: q.processedQuery,\n            k: options.documentCount || 10\n        });\n        steps.push(...rr.thinkingSteps);\n        const quiz = new _agents__WEBPACK_IMPORTED_MODULE_0__.QuizAgent();\n        const qr = await quiz.process({\n            topic: options.topic || q.processedQuery,\n            documents: rr.documents,\n            difficulty: options.difficulty || \"medium\",\n            questionCount: options.questionCount || 5\n        });\n        steps.push(...qr.thinkingSteps);\n        return {\n            questions: qr.questions,\n            thinkingSteps: steps,\n            pipelineInfo: this.name,\n            sources: rr.documents,\n            metadata: {\n                topic: options.topic || q.processedQuery,\n                difficulty: options.difficulty || \"medium\",\n                questionCount: qr.questions.length\n            }\n        };\n    }\n}\nclass TutorPipeline extends BasePipeline {\n    constructor(){\n        super(\"Tutoring Pipeline\");\n    }\n    async process(query, options = {}) {\n        const steps = [];\n        const qa = new _agents__WEBPACK_IMPORTED_MODULE_0__.QueryAgent();\n        const q = await qa.process({\n            query\n        });\n        steps.push(...q.thinkingSteps);\n        const r = new _agents__WEBPACK_IMPORTED_MODULE_0__.RetrievalAgent();\n        const rr = await r.process({\n            query: q.processedQuery,\n            k: options.documentCount || 8\n        });\n        steps.push(...rr.thinkingSteps);\n        const tutor = new _agents__WEBPACK_IMPORTED_MODULE_0__.TutorAgent();\n        const tr = await tutor.process({\n            topic: options.topic || q.processedQuery,\n            documents: rr.documents,\n            userLevel: options.userLevel || \"intermediate\",\n            learningStyle: options.learningStyle || \"reading\"\n        });\n        steps.push(...tr.thinkingSteps);\n        return {\n            tutorialSections: tr.tutorialSections,\n            thinkingSteps: steps,\n            pipelineInfo: this.name,\n            sources: rr.documents,\n            metadata: {\n                topic: options.topic || q.processedQuery,\n                userLevel: options.userLevel || \"intermediate\",\n                sectionCount: tr.tutorialSections.length\n            }\n        };\n    }\n}\nfunction createPipeline(mode) {\n    switch(mode){\n        case \"phase1\":\n            return new Phase1Pipeline();\n        case \"phase2\":\n            return new Phase2Pipeline();\n        case \"phase3\":\n            return new Phase3Pipeline();\n        case \"auto\":\n            return new AutoPipeline();\n        case \"meta\":\n            return new AutoPipeline();\n        case \"quiz\":\n            return new QuizPipeline();\n        case \"tutor\":\n            return new TutorPipeline();\n        default:\n            return new AutoPipeline();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/pipelines.ts\n");

/***/ }),

/***/ "(rsc)/./src/server/vectorstore.ts":
/*!***********************************!*\
  !*** ./src/server/vectorstore.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QdrantVectorStore: () => (/* binding */ QdrantVectorStore),\n/* harmony export */   VectorStore: () => (/* binding */ VectorStore),\n/* harmony export */   getEmbedding: () => (/* binding */ getEmbedding),\n/* harmony export */   getVectorStore: () => (/* binding */ getVectorStore),\n/* harmony export */   loadSampleDocuments: () => (/* binding */ loadSampleDocuments)\n/* harmony export */ });\n/* harmony import */ var _qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @qdrant/js-client-rest */ \"(rsc)/./node_modules/@qdrant/js-client-rest/dist/esm/qdrant-client.js\");\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\n\nconst VECTOR_STORE_TYPE = process.env.VECTOR_STORE || \"qdrant\";\nconst QDRANT_HOST = process.env.QDRANT_HOST || \"localhost\";\nconst QDRANT_PORT = parseInt(process.env.QDRANT_PORT || \"6333\");\nconst QDRANT_CLOUD_URL = process.env.QDRANT_CLOUD_URL;\nconst QDRANT_CLOUD_API_KEY = process.env.QDRANT_CLOUD_API_KEY;\n// Note: The collection name has a leading space in Qdrant Cloud\nconst COLLECTION_NAME = \" pulmo_fishman_v5_google-001\";\nconst GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;\n// Use gemini-embedding-001 with 3072-dim\nconst EMBEDDING_MODEL = process.env.EMBEDDING_MODEL || \"gemini-embedding-001\";\nconst EMBEDDING_DIM = parseInt(process.env.EMBEDDING_DIM || \"3072\");\nasync function getEmbedding(text) {\n    if (!GOOGLE_API_KEY) throw new Error(\"Google API key not found for embeddings\");\n    const genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(GOOGLE_API_KEY);\n    // Use gemini-embedding-001 with outputDimensionality set to 3072\n    try {\n        const model = genAI.getGenerativeModel({\n            model: EMBEDDING_MODEL\n        });\n        console.log(`Generating embedding with model: ${EMBEDDING_MODEL} for text length: ${text.length}, requesting ${EMBEDDING_DIM} dimensions`);\n        const result = await model.embedContent(text, {\n            outputDimensionality: EMBEDDING_DIM\n        });\n        const values = result.embedding.values;\n        console.log(`Embedding generated: ${values.length} dimensions`);\n        if (values.length !== EMBEDDING_DIM) {\n            console.warn(`Embedding dimension ${values.length} != configured ${EMBEDDING_DIM}. Requested ${EMBEDDING_DIM} but got ${values.length}.`);\n        }\n        return values;\n    } catch (e) {\n        console.error(\"Embedding with outputDimensionality failed:\", e);\n        // Try without outputDimensionality as fallback\n        try {\n            console.log(\"Retrying without outputDimensionality parameter...\");\n            const model = genAI.getGenerativeModel({\n                model: EMBEDDING_MODEL\n            });\n            const result = await model.embedContent(text);\n            const values = result.embedding.values;\n            console.log(`Fallback embedding generated: ${values.length} dimensions`);\n            return values;\n        } catch (e2) {\n            console.error(\"Fallback embedding also failed:\", e2);\n            throw new Error(`Embedding generation failed: ${e2?.message || e2}`);\n        }\n    }\n}\nclass VectorStore {\n    async init() {}\n    async addDocuments(_documents) {}\n    async similaritySearch(_query, _k) {\n        return [];\n    }\n    async deleteCollection() {}\n    async getCollectionInfo() {\n        return {};\n    }\n    async countDocuments() {\n        return 0;\n    }\n}\nclass QdrantVectorStore extends VectorStore {\n    constructor(){\n        super();\n        if (QDRANT_CLOUD_URL && QDRANT_CLOUD_API_KEY && QDRANT_CLOUD_URL.startsWith(\"http\")) {\n            this.client = new _qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_1__.QdrantClient({\n                url: QDRANT_CLOUD_URL,\n                apiKey: QDRANT_CLOUD_API_KEY\n            });\n        } else {\n            this.client = new _qdrant_js_client_rest__WEBPACK_IMPORTED_MODULE_1__.QdrantClient({\n                host: QDRANT_HOST,\n                port: QDRANT_PORT\n            });\n        }\n        this.collectionName = COLLECTION_NAME;\n    }\n    async init() {\n        try {\n            const collections = await this.client.getCollections();\n            console.log(`[QdrantVectorStore] Available collections:`, collections.collections.map((c)=>c.name));\n            const exists = collections.collections.find((c)=>c.name === this.collectionName);\n            if (!exists) {\n                console.warn(`[QdrantVectorStore] Collection \"${this.collectionName}\" not found in Qdrant!`);\n                console.warn(`[QdrantVectorStore] Available collections are:`, collections.collections.map((c)=>c.name).join(\", \"));\n            // Do NOT create a new collection - use the existing one\n            // await this.client.createCollection(this.collectionName, { vectors: { size: EMBEDDING_DIM, distance: 'Cosine' } })\n            } else {\n                const info = await this.client.getCollection(this.collectionName);\n                console.log(`[QdrantVectorStore] Using existing collection \"${this.collectionName}\" with ${info.points_count} points, vector size: ${info.config?.params?.vectors?.size || \"unknown\"}`);\n            }\n        } catch (error) {\n            console.error(`[QdrantVectorStore] Error during init:`, error.message || error);\n        }\n    }\n    async addDocuments(documents) {\n        const embeddings = await Promise.all(documents.map((d)=>getEmbedding(d.content)));\n        const points = documents.map((doc, i)=>({\n                id: Date.now() + i,\n                vector: embeddings[i],\n                payload: {\n                    content: doc.content,\n                    ...doc.metadata\n                }\n            }));\n        await this.client.upsert(this.collectionName, {\n            wait: true,\n            points\n        });\n    }\n    extractContent(payload) {\n        if (!payload) return \"\";\n        const candidates = [\n            \"content\",\n            \"text\",\n            \"page_content\",\n            \"chunk\",\n            \"document\",\n            \"body\",\n            \"data\",\n            \"summary\"\n        ];\n        for (const key of candidates){\n            const v = payload[key] ?? payload?.payload?.[key];\n            if (typeof v === \"string\" && v.trim().length > 0) return v;\n            if (Array.isArray(v)) {\n                const joined = v.filter(Boolean).join(\" \").trim();\n                if (joined) return joined;\n            }\n            if (v && typeof v === \"object\") {\n                const str = JSON.stringify(v);\n                if (str && str.length > 0) return str;\n            }\n        }\n        // If payload has a single string field, use it\n        const values = Object.values(payload);\n        const firstStr = values.find((v)=>typeof v === \"string\");\n        if (firstStr) return firstStr;\n        return \"\";\n    }\n    extractSource(payload) {\n        return payload?.source || payload?.url || payload?.link || payload?.metadata?.source || payload?.file || undefined;\n    }\n    async similaritySearch(query, k) {\n        console.log(`[QdrantVectorStore] Searching in collection: \"${this.collectionName}\" for query: \"${query}\" with k=${k}`);\n        const vector = await getEmbedding(query);\n        console.log(`[QdrantVectorStore] Vector generated, searching with ${vector.length} dimensions...`);\n        try {\n            const results = await this.client.search(this.collectionName, {\n                vector,\n                limit: k,\n                with_payload: true\n            });\n            console.log(`[QdrantVectorStore] Search completed, found ${results.length} results`);\n            return results.map((r)=>{\n                const content = this.extractContent(r.payload);\n                const meta = {\n                    ...r.payload\n                };\n                if (!meta.source) {\n                    const src = this.extractSource(r.payload);\n                    if (src) meta.source = src;\n                }\n                return {\n                    content,\n                    metadata: meta,\n                    distance: r.score\n                };\n            });\n        } catch (error) {\n            console.error(`[QdrantVectorStore] Search failed:`, error.response?.data || error.message || error);\n            throw error;\n        }\n    }\n    async deleteCollection() {\n        await this.client.deleteCollection(this.collectionName);\n    }\n    async getCollectionInfo() {\n        return this.client.getCollection(this.collectionName);\n    }\n    async countDocuments() {\n        const info = await this.getCollectionInfo();\n        return info?.points_count || 0;\n    }\n}\nlet vectorStoreInstance = null;\nasync function getVectorStore() {\n    if (!vectorStoreInstance) {\n        vectorStoreInstance = VECTOR_STORE_TYPE === \"qdrant\" ? new QdrantVectorStore() : new VectorStore();\n        await vectorStoreInstance.init();\n    }\n    return vectorStoreInstance;\n}\nasync function loadSampleDocuments() {\n    const vectorStore = await getVectorStore();\n    const sampleDocuments = [\n        {\n            content: \"Artificial Intelligence (AI) ...\",\n            metadata: {\n                source: \"AI Basics\",\n                category: \"technology\",\n                type: \"definition\"\n            }\n        },\n        {\n            content: \"Machine Learning is a subset ...\",\n            metadata: {\n                source: \"ML Fundamentals\",\n                category: \"machine-learning\",\n                type: \"definition\"\n            }\n        },\n        {\n            content: \"RAG (Retrieval-Augmented Generation) ...\",\n            metadata: {\n                source: \"RAG Architecture\",\n                category: \"ai-architecture\",\n                type: \"explanation\"\n            }\n        }\n    ];\n    await vectorStore.addDocuments(sampleDocuments);\n    return {\n        success: true,\n        message: `Successfully loaded ${sampleDocuments.length} sample documents`,\n        documentCount: sampleDocuments.length\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/server/vectorstore.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/undici","vendor-chunks/axios","vendor-chunks/@qdrant","vendor-chunks/asynckit","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/call-bind-apply-helpers","vendor-chunks/debug","vendor-chunks/get-proto","vendor-chunks/mime-db","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/form-data","vendor-chunks/follow-redirects","vendor-chunks/@google","vendor-chunks/supports-color","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/mime-types","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/has-flag","vendor-chunks/get-intrinsic","vendor-chunks/es-set-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/delayed-stream","vendor-chunks/combined-stream","vendor-chunks/@sevinf"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ftutor%2Fexplain%2Froute&page=%2Fapi%2Ftutor%2Fexplain%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftutor%2Fexplain%2Froute.ts&appDir=E%3A%5CCode%20projects%5Cgithub%20projects%5Csmart-sage-bot%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CCode%20projects%5Cgithub%20projects%5Csmart-sage-bot&isDev=true&tsconfigPath=.%2Ftsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();